// Depends on jsbn.js and rng.js
// Version 1.1: support utf-8 encoding in pkcs1pad2
// convert a (hex) string to a bignum object
function parseBigInt(e,t){return new BigInteger(e,t)}function linebrk(e,t){var n="",r=0;while(r+t<e.length){n+=e.substring(r,r+t)+"\n";r+=t}return n+e.substring(r,e.length)}function byte2Hex(e){return e<16?"0"+e.toString(16):e.toString(16)}function pkcs1pad2(e,t){if(t<e.length+11)throw"Message too long for RSA (n="+t+", l="+e.length+")";var n=new Array,r=e.length-1;while(r>=0&&t>0){var i=e.charCodeAt(r--);if(i<128)n[--t]=i;else if(i>127&&i<2048){n[--t]=i&63|128;n[--t]=i>>6|192}else{n[--t]=i&63|128;n[--t]=i>>6&63|128;n[--t]=i>>12|224}}n[--t]=0;var s=new SecureRandom,o=new Array;while(t>2){o[0]=0;while(o[0]==0)s.nextBytes(o);n[--t]=o[0]}n[--t]=2;n[--t]=0;return new BigInteger(n)}function RSAKey(){this.n=null;this.e=0;this.d=null;this.p=null;this.q=null;this.dmp1=null;this.dmq1=null;this.coeff=null}function RSASetPublic(e,t){if(e!=null&&t!=null&&e.length>0&&t.length>0){this.n=parseBigInt(e,16);this.e=parseInt(t,16)}else alert("Invalid RSA public key")}function RSADoPublic(e){return e.modPowInt(this.e,this.n)}function RSAEncrypt(e){var t=pkcs1pad2(e,this.n.bitLength()+7>>3);if(t==null)return null;var n=this.doPublic(t);if(n==null)return null;var r=n.toString(16);return(r.length&1)==0?r:"0"+r}function RSAEncrypt(e){var t=pkcs1pad2(e,this.n.bitLength()+7>>3);if(t==null)return null;var n=this.doPublic(t);if(n==null)return null;var r=n.toString(16);return(r.length&1)==0?r:"0"+r}function RSAToJSON(){return{coeff:this.coeff.toString(16),d:this.d.toString(16),dmp1:this.dmp1.toString(16),dmq1:this.dmq1.toString(16),e:this.e.toString(16),n:this.n.toString(16),p:this.p.toString(16),q:this.q.toString(16)}}function RSAParse(e){var t=e,n=new RSAKey;n.setPrivateEx(t.n,t.e,t.d,t.p,t.q,t.dmp1,t.dmq1,t.coeff);return n}function pkcs1unpad2(e,t){var n=e.toByteArray(),r=0;while(r<n.length&&n[r]==0)++r;if(n.length-r!=t-1||n[r]!=2)return null;++r;while(n[r]!=0)if(++r>=n.length)return null;var i="";while(++r<n.length){var s=n[r]&255;if(s<128)i+=String.fromCharCode(s);else if(s>191&&s<224){i+=String.fromCharCode((s&31)<<6|n[r+1]&63);++r}else{i+=String.fromCharCode((s&15)<<12|(n[r+1]&63)<<6|n[r+2]&63);r+=2}}return i}function RSASetPrivate(e,t,n){if(e!=null&&t!=null&&e.length>0&&t.length>0){this.n=parseBigInt(e,16);this.e=parseInt(t,16);this.d=parseBigInt(n,16)}else alert("Invalid RSA private key")}function RSASetPrivateEx(e,t,n,r,i,s,o,u){if(e!=null&&t!=null&&e.length>0&&t.length>0){this.n=parseBigInt(e,16);this.e=parseInt(t,16);this.d=parseBigInt(n,16);this.p=parseBigInt(r,16);this.q=parseBigInt(i,16);this.dmp1=parseBigInt(s,16);this.dmq1=parseBigInt(o,16);this.coeff=parseBigInt(u,16)}else alert("Invalid RSA private key")}function RSAGenerate(e,t){var n=new SeededRandom,r=e>>1;this.e=parseInt(t,16);var i=new BigInteger(t,16);for(;;){for(;;){this.p=new BigInteger(e-r,1,n);if(this.p.subtract(BigInteger.ONE).gcd(i).compareTo(BigInteger.ONE)==0&&this.p.isProbablePrime(10))break}for(;;){this.q=new BigInteger(r,1,n);if(this.q.subtract(BigInteger.ONE).gcd(i).compareTo(BigInteger.ONE)==0&&this.q.isProbablePrime(10))break}if(this.p.compareTo(this.q)<=0){var s=this.p;this.p=this.q;this.q=s}var o=this.p.subtract(BigInteger.ONE),u=this.q.subtract(BigInteger.ONE),a=o.multiply(u);if(a.gcd(i).compareTo(BigInteger.ONE)==0){this.n=this.p.multiply(this.q);this.d=i.modInverse(a);this.dmp1=this.d.mod(o);this.dmq1=this.d.mod(u);this.coeff=this.q.modInverse(this.p);break}}}function RSADoPrivate(e){if(this.p==null||this.q==null)return e.modPow(this.d,this.n);var t=e.mod(this.p).modPow(this.dmp1,this.p),n=e.mod(this.q).modPow(this.dmq1,this.q);while(t.compareTo(n)<0)t=t.add(this.p);return t.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)}function RSADecrypt(e){var t=parseBigInt(e,16),n=this.doPrivate(t);return n==null?null:pkcs1unpad2(n,this.n.bitLength()+7>>3)}function _rsasign_getHexPaddedDigestInfoForString(e,t,n){var r=t/4,i=_RSASIGN_HASHHEXFUNC[n],s=i(e),o="0001",u="00"+_RSASIGN_DIHEAD[n]+s,a="",f=r-o.length-u.length;for(var l=0;l<f;l+=2)a+="ff";sPaddedMessageHex=o+a+u;return sPaddedMessageHex}function _rsasign_signString(e,t){var n=_rsasign_getHexPaddedDigestInfoForString(e,this.n.bitLength(),t),r=parseBigInt(n,16),i=this.doPrivate(r),s=i.toString(16);return s}function _rsasign_signStringWithSHA1(e){return _rasign_signString(e,"sha1")}function _rsasign_signStringWithSHA256(e){return _rasign_signString(e,"sha256")}function _rsasign_getDecryptSignatureBI(e,t,n){var r=new RSAKey;r.setPublic(t,n);var i=r.doPublic(e);return i}function _rsasign_getHexDigestInfoFromSig(e,t,n){var r=_rsasign_getDecryptSignatureBI(e,t,n),i=r.toString(16).replace(/^1f+00/,"");return i}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(e){for(var t in _RSASIGN_DIHEAD){var n=_RSASIGN_DIHEAD[t],r=n.length;if(e.substring(0,r)==n){var i=[t,e.substring(r)];return i}}return[]}function _rsasign_verifySignatureWithArgs(e,t,n,r){var i=_rsasign_getHexDigestInfoFromSig(t,n,r),s=_rsasign_getAlgNameAndHashFromHexDisgestInfo(i);if(s.length==0)return!1;var o=s[0],u=s[1],a=_RSASIGN_HASHHEXFUNC[o],f=a(e);return u==f}function _rsasign_verifyHexSignatureForMessage(e,t){var n=parseBigInt(e,16),r=_rsasign_verifySignatureWithArgs(t,n,this.n.toString(16),this.e.toString(16));return r}function _rsasign_verifyString(e,t){t=t.replace(/[ \n]+/g,"");var n=parseBigInt(t,16),r=this.doPublic(n),i=r.toString(16).replace(/^1f+00/,""),s=_rsasign_getAlgNameAndHashFromHexDisgestInfo(i);if(s.length==0)return!1;var o=s[0],u=s[1],a=_RSASIGN_HASHHEXFUNC[o],f=a(e);return u==f}RSAKey.prototype.doPublic=RSADoPublic;RSAKey.prototype.setPublic=RSASetPublic;RSAKey.prototype.encrypt=RSAEncrypt;RSAKey.prototype.toJSON=RSAToJSON;RSAKey.prototype.parse=RSAParse;RSAKey.prototype.doPrivate=RSADoPrivate;RSAKey.prototype.setPrivate=RSASetPrivate;RSAKey.prototype.setPrivateEx=RSASetPrivateEx;RSAKey.prototype.generate=RSAGenerate;RSAKey.prototype.decrypt=RSADecrypt;var _RSASIGN_DIHEAD=[];_RSASIGN_DIHEAD.sha1="3021300906052b0e03021a05000414";_RSASIGN_DIHEAD.sha256="3031300d060960864801650304020105000420";var _RSASIGN_HASHHEXFUNC=[];_RSASIGN_HASHHEXFUNC.sha1=sha1.hex;_RSASIGN_HASHHEXFUNC.sha256=sha256.hex;RSAKey.prototype.signString=_rsasign_signString;RSAKey.prototype.signStringWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signStringWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.verifyString=_rsasign_verifyString;RSAKey.prototype.verifyHexSignatureForMessage=_rsasign_verifyHexSignatureForMessage;